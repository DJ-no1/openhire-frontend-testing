"use client";
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
    DatabaseService,
    getApplicationStatusColor,
    getScoreBadgeColor,
    type DatabaseApplication,
    type DatabaseUserResume
} from "@/lib/database";
import {
    Calendar,
    FileText,
    Building,
    TrendingUp,
    Search,
    Filter,
    Eye,
    BarChart3,
    Clock,
    MapPin,
    Briefcase,
    ArrowLeft,
    User,
    Loader2,
    AlertCircle
} from "lucide-react";
import { toast } from "sonner";

export default function CandidateApplicationsPage() {
    const { candidateId } = useParams();
    const [applications, setApplications] = useState<(DatabaseApplication & { user_resume: DatabaseUserResume[] })[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [statusFilter, setStatusFilter] = useState<string>("all");
    const [scoreFilter, setScoreFilter] = useState<string>("all");

    useEffect(() => {
        if (candidateId) {
            fetchApplications();
        }
    }, [candidateId]);

    const fetchApplications = async () => {
        setLoading(true);
        setError(null);
        try {
            const data = await DatabaseService.getApplicationsForCandidate(candidateId as string);
            setApplications(data);
            toast.success(`Loaded ${data.length} applications for this candidate`);
        } catch (err) {
            const errorMessage = (err as Error).message;
            setError(errorMessage);
            toast.error(`Failed to load applications: ${errorMessage}`);
        } finally {
            setLoading(false);
        }
    };

    const filteredApplications = applications.filter(app => {
        // Search filter
        const searchMatch = searchTerm === "" ||
            app.job?.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            app.job?.job_type?.toLowerCase().includes(searchTerm.toLowerCase());

        // Status filter
        const statusMatch = statusFilter === "all" || app.status === statusFilter;

        // Score filter
        const resume = app.user_resume?.[0];
        let scoreMatch = true;
        if (scoreFilter !== "all" && resume?.score) {
            const score = resume.score;
            switch (scoreFilter) {
                case "excellent":
                    scoreMatch = score >= 80;
                    break;
                case "good":
                    scoreMatch = score >= 60 && score < 80;
                    break;
                case "fair":
                    scoreMatch = score >= 40 && score < 60;
                    break;
                case "poor":
                    scoreMatch = score < 40;
                    break;
                default:
                    scoreMatch = true;
            }
        }

        return searchMatch && statusMatch && scoreMatch;
    });

    const formatDate = (dateString?: string) => {
        if (!dateString) return "Not specified";
        try {
            return new Date(dateString).toLocaleDateString("en-US", {
                year: "numeric",
                month: "short",
                day: "numeric"
            });
        } catch {
            return dateString;
        }
    };

    const formatSalary = (salary?: string) => {
        if (!salary) return "Not specified";
        return salary.includes("$") ? salary : `$${salary}`;
    };

    const getScoreLabel = (score?: number) => {
        if (!score) return "No Score";
        if (score >= 80) return "Excellent";
        if (score >= 60) return "Good";
        if (score >= 40) return "Fair";
        return "Poor";
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center space-y-4">
                    <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto" />
                    <div>
                        <h3 className="text-lg font-medium">Loading Candidate Applications</h3>
                        <p className="text-muted-foreground">Retrieving all applications for this candidate...</p>
                    </div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
                <Card className="max-w-lg w-full border-red-200 bg-red-50">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2 text-red-800">
                            <AlertCircle className="h-6 w-6" />
                            Error Loading Applications
                        </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <p className="text-red-700">{error}</p>
                        <div className="flex gap-2">
                            <Button variant="outline" onClick={fetchApplications}>
                                Try Again
                            </Button>
                            <Link href="/dashboard/application">
                                <Button>
                                    <ArrowLeft className="mr-2 h-4 w-4" />
                                    Back to Applications
                                </Button>
                            </Link>
                        </div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Header */}
                <div className="flex items-center justify-between mb-8">
                    <div className="flex items-center gap-4">
                        <Link href="/dashboard/application">
                            <Button variant="outline" size="sm">
                                <ArrowLeft className="mr-2 h-4 w-4" />
                                Back to Applications
                            </Button>
                        </Link>
                        <div>
                            <h1 className="text-3xl font-bold text-gray-900">
                                Candidate Applications
                            </h1>
                            <p className="text-lg text-gray-600">
                                All applications for candidate: {candidateId}
                            </p>
                        </div>
                    </div>
                    <div className="flex items-center gap-2">
                        <Badge variant="secondary" className="text-lg px-3 py-1">
                            {filteredApplications.length} {filteredApplications.length === 1 ? 'Application' : 'Applications'}
                        </Badge>
                    </div>
                </div>

                {/* Filters */}
                <Card className="shadow-lg mb-8">
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2">
                                    <Filter className="h-5 w-5" />
                                    Filter Applications
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div className="space-y-2">
                                        <label className="text-sm font-medium">Search</label>
                                        <div className="relative">
                                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                                            <Input
                                                placeholder="Search by job title or type..."
                                                value={searchTerm}
                                                onChange={(e) => setSearchTerm(e.target.value)}
                                                className="pl-10"
                                            />
                                        </div>
                                    </div>
                                    <div className="space-y-2">
                                        <label className="text-sm font-medium">Status</label>
                                        <Select value={statusFilter} onValueChange={setStatusFilter}>
                                            <SelectTrigger>
                                                <SelectValue placeholder="All Statuses" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="all">All Statuses</SelectItem>
                                                <SelectItem value="pending">Pending</SelectItem>
                                                <SelectItem value="reviewed">Reviewed</SelectItem>
                                                <SelectItem value="interview">Interview</SelectItem>
                                                <SelectItem value="accepted">Accepted</SelectItem>
                                                <SelectItem value="rejected">Rejected</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>
                                    <div className="space-y-2">
                                        <label className="text-sm font-medium">Score</label>
                                        <Select value={scoreFilter} onValueChange={setScoreFilter}>
                                            <SelectTrigger>
                                                <SelectValue placeholder="All Scores" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="all">All Scores</SelectItem>
                                                <SelectItem value="excellent">Excellent (80%+)</SelectItem>
                                                <SelectItem value="good">Good (60-79%)</SelectItem>
                                                <SelectItem value="fair">Fair (40-59%)</SelectItem>
                                                <SelectItem value="poor">Poor (&lt;40%)</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Applications Grid */}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            {filteredApplications.map((application) => {
                                const resume = application.user_resume?.[0];

                                return (
                                    <Card key={application.id} className="shadow-lg hover:shadow-xl transition-shadow">
                                        <CardHeader className="pb-3">
                                            <div className="flex items-start justify-between">
                                                <div className="flex items-start gap-3">
                                                    <div className="p-2 bg-blue-100 rounded-lg">
                                                        <Building className="h-6 w-6 text-blue-600" />
                                                    </div>
                                                    <div>
                                                        <CardTitle className="text-lg mb-1">
                                                            {application.job?.title || "Unknown Position"}
                                                        </CardTitle>
                                                        <div className="flex items-center gap-4 text-sm text-gray-600">
                                                            <div className="flex items-center gap-1">
                                                                <Calendar className="h-4 w-4" />
                                                                Applied {formatDate(application.created_at)}
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <Badge
                                                    variant="outline"
                                                    className={`${getApplicationStatusColor(application.status)}`}
                                                >
                                                    {application.status.charAt(0).toUpperCase() + application.status.slice(1)}
                                                </Badge>
                                            </div>
                                        </CardHeader>
                                        <CardContent className="space-y-4">
                                            <div className="flex flex-wrap gap-3 text-sm text-gray-600">
                                                <div className="flex items-center gap-2">
                                                    <Briefcase className="h-4 w-4" />
                                                    <span>{application.job?.job_type || "Full-time"}</span>
                                                </div>
                                                <div className="flex items-center gap-2">
                                                    <MapPin className="h-4 w-4" />
                                                    <span>Remote</span>
                                                </div>
                                                {application.job?.salary && (
                                                    <div className="flex items-center gap-2">
                                                        <span>💰</span>
                                                        <span>{formatSalary(application.job.salary)}</span>
                                                    </div>
                                                )}
                                            </div>

                                            <div className="flex items-center justify-between pt-4 border-t">
                                                <div className="flex items-center gap-4">
                                                    {resume?.score ? (
                                                        <div className="flex items-center gap-2">
                                                            <BarChart3 className="h-4 w-4 text-blue-600" />
                                                            <span className="font-medium text-gray-900">
                                                                {resume.score}% Match
                                                            </span>
                                                            <Badge
                                                                variant="outline"
                                                                className={`text-xs ${getScoreBadgeColor(resume.score)}`}
                                                            >
                                                                {getScoreLabel(resume.score)}
                                                            </Badge>
                                                        </div>
                                                    ) : (
                                                        <div className="flex items-center gap-2 text-gray-500">
                                                            <Clock className="h-4 w-4" />
                                                            <span className="text-sm">Pending Analysis</span>
                                                        </div>
                                                    )}
                                                </div>

                                                <Link href={`/dashboard/application/${application.id}/analysis`}>
                                                    <Button variant="outline" size="sm">
                                                        <Eye className="mr-2 h-4 w-4" />
                                                        View Analysis
                                                    </Button>
                                                </Link>
                                            </div>
                                        </CardContent>
                                    </Card>
                                );
                            })}
                        </div>

                        {filteredApplications.length === 0 && (
                            <Card className="shadow-lg">
                                <CardContent className="text-center py-12">
                                    <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                    <h3 className="text-lg font-medium text-gray-900 mb-2">No Applications Found</h3>
                                    <p className="text-gray-600">
                                        {applications.length === 0
                                            ? "This candidate hasn't submitted any applications yet."
                                            : "No applications match your current filters. Try adjusting your search criteria."
                                        }
                                    </p>
                                </CardContent>
                            </Card>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}
